import math

"""此文件来自于github以及其他网络开源资源，在此对作者表示感谢"""

# 以下是根据bd地图JavaScript API破解得到 bd坐标<->墨卡托坐标 转换算法
LLBAND = [75, 60, 45, 30, 15, 0]
MCBAND = [12890594.86, 8362377.87, 5591021, 3481989.83, 1678043.12, 0]
LL2MC = [[-0.0015702102444, 111320.7020616939, 1704480524535203, -10338987376042340, 26112667856603880, -35149669176653700, 26595700718403920, -10725012454188240, 1800819912950474, 82.5], [0.0008277824516172526, 111320.7020463578, 647795574.6671607, -4082003173.641316, 10774905663.51142, -15171875531.51559, 12053065338.62167, -5124939663.577472, 913311935.9512032, 67.5], [0.00337398766765, 111320.7020202162, 4481351.045890365, -23393751.19931662, 79682215.47186455, -115964993.2797253, 97236711.15602145, -43661946.33752821, 8477230.501135234,
    52.5], [0.00220636496208, 111320.7020209128, 51751.86112841131, 3796837.749470245, 992013.7397791013, -1221952.21711287, 1340652.697009075, -620943.6990984312, 144416.9293806241, 37.5], [-0.0003441963504368392, 111320.7020576856, 278.2353980772752, 2485758.690035394, 6070.750963243378, 54821.18345352118, 9540.606633304236, -2710.55326746645, 1405.483844121726, 22.5], [-0.0003218135878613132, 111320.7020701615, 0.00369383431289, 823725.6402795718, 0.46104986909093, 2351.343141331292, 1.58060784298199, 8.77738589078284, 0.37238884252424, 7.45]]
MC2LL = [[1.410526172116255e-8, 0.00000898305509648872, -1.9939833816331, 200.9824383106796, -187.2403703815547, 91.6087516669843, -23.38765649603339, 2.57121317296198, -0.03801003308653, 17337981.2], [-7.435856389565537e-9, 0.000008983055097726239, -0.78625201886289, 96.32687599759846, -1.85204757529826, -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 10260144.86], [-3.030883460898826e-8, 0.00000898305509983578, 0.30071316287616, 59.74293618442277, 7.357984074871, -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475,
    6856817.37], [-1.981981304930552e-8, 0.000008983055099779535, 0.03278182852591, 40.31678527705744, 0.65659298677277, -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4482777.06], [3.09191371068437e-9, 0.000008983055096812155, 0.00006995724062, 23.10934304144901, -0.00023663490511, -0.6321817810242, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2555164.4], [2.890871144776878e-9, 0.000008983055095805407, -3.068298e-8, 7.47137025468032, -0.00000353937994, -0.02145144861037, -0.00001234426596, 0.00010322952773, -0.00000323890364, 826088.5]]


def get_point(x, y):
    return {"lng": x, "lat": y}


def Convertor(lng, lat, param):
    x = param[0] + param[1] * abs(lng)
    a = abs(lat) / param[9]
    y = param[2] + param[3] * a + param[4] * a * a + param[5] * a * a * a + param[6] * a * a * a * a + param[7] * a * a * a * a * a + param[8] * a * a * a * a * a * a
    x *= -1 if lng < 0 else 1
    y *= -1 if lat < 0 else 1
    p = get_point(x,y)
    return p

# bd坐标转墨卡托
def LatLng2Mercator(p):
    arr = None
    n_lat = 74 if p["lat"] > 74 else p["lat"]
    n_lat = -74 if n_lat < -74 else n_lat
    for i in range(len(LLBAND)):
        if p["lat"] >= LLBAND[i]:
            arr = LL2MC[i]
            break
    if arr == None:
        for i in range(len(LLBAND))[::-1]:
            if p["lat"] <= -LLBAND[i]:
                arr = LL2MC[i]
                break
    res = Convertor(p["lng"], p["lat"], arr)
    mc_p = get_point(res["lng"], res["lat"])
    return mc_p


# 墨卡托坐标转bd p = [x,y]  [118,22]
def Mercator2LatLng(p):
    arr = None
    np = get_point(abs(p["lng"]), abs(p["lat"]))
    for i in range(len(MCBAND)):
        if (np["lat"] >= MCBAND[i]):
            arr = MC2LL[i]
            break
    res = Convertor(np["lng"], np["lat"], arr)
    ll_p = get_point(res["lng"], res["lat"])
    return ll_p

# 获取bd地图图块编号
def mc_2_pix(x,y,z):
    p = get_point(x,y)
    mc_p = LatLng2Mercator(p)
    if z == 18:
        pix_lng = math.floor(mc_p["lng"])
        pxi_lat = math.floor(mc_p["lat"])
    else:
        pix_lng = math.floor(mc_p["lng"]) * math.pow(2,z-18)
        pxi_lat = math.floor(mc_p["lat"]) * math.pow(2,z-18)

    return {"pix_lng":pix_lng,"pix_lat":pxi_lat}


# 获取行列号
def get_row_col_num(x,y,z):
    pix_lng_lat = mc_2_pix(x,y,z)
    row = pix_lng_lat["pix_lng"] / 256
    col = pix_lng_lat["pix_lat"] / 256
    return (math.floor(row),math.floor(col))



# 行列号获取切片中心点经纬度坐标
def row_col_to_mc(row,col,z):
    # 计算像素坐标
    pix_lng = (row+0.5) * 256  # 加上0.5获取切片中心点坐标
    pix_lat = (col+0.5) * 256   # 加上0.5获取切片中心点坐标
    # 计算墨卡托平面坐标
    mc_lng = None
    mc_lat = None
    if z == 18:
        mc_lng = pix_lng
        mc_lat = pix_lat
    else:
        mc_lng = pix_lng / math.pow(2,z-18)
        mc_lat = pix_lat / math.pow(2,z-18)
    p = get_point(mc_lng,mc_lat)
    print(p)
    ll_p = Mercator2LatLng(p)
    return ll_p




if __name__ == '__main__':
    sy_p = get_point(108.361157,22.807771)
    # llp = LatLng2Mercator(sy_p)
    # print(llp)

    # mmP = {'lng': 12062904.52873968, 'lat': 2592000.41}
    # print(Mercator2LatLng(mmP))
    # rc = get_row_col_num(108.363438,22.8082,19)
    # print(rc)

    llpx1 = row_col_to_mc(47021, 10065,18)
    llpx2 = row_col_to_mc(47022, 10065,18)
    llpy1 = row_col_to_mc(47021, 10065,18)
    llpy2 = row_col_to_mc(47021, 10066,18)
    print((llpx2['lng']-llpx1['lng'])/256)
    print((llpy2['lat']-llpy1['lat'])/256)
    # print(llpy2)

